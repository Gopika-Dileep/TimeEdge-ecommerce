<%- include("../../views/partials/user/header") %>

<style>
  .checkout-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 2rem;
    font-family: "Inter", sans-serif;
  }

  .page-title {
    font-size: 1.60rem;
    color: #1a1a1a;
    margin-bottom: 1.50rem;
    font-weight: 600;
  }

  .checkout-grid {
    display: grid;
    grid-template-columns: 2fr 1fr;
    gap: 2rem;
  }

  @media (max-width: 768px) {
    .checkout-grid {
      grid-template-columns: 1fr;
    }
  }

  .section-card {
    background: white;
    border-radius: 12px;
    padding: 1.5rem;
    padding-bottom: 10px;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  }

  .section-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    border-bottom: 1px solid #eee;
  }

  .section-title {
    font-size: 1.25rem;
    font-weight: 600;
    color: #1a1a1a;
    display: flex;
    align-items: center;
    gap: 0.3rem;
    margin-bottom: 20px;
  }

  .address-card {
    border: 1px solid #e5e5e5;
    border-radius: 8px;
    padding: 1rem;
    margin-bottom: 1rem;
    transition: all 0.2s;
  }

  .address-card:hover {
    border-color: #007bff;
    background: #f8f9ff;
  }

  .address-card input[type="radio"] {
    margin-right: 1rem;
  }

  .address-details {
    margin-top: 0.5rem;
    color: #666;
  }

  .btn-primary {    background: #007bff;
    color: white;
    padding: 0.75rem 1.5rem;
    border-radius: 6px;
    border: none;
    font-weight: 500;
    transition: all 0.2s;
  }

  .btn-primary:hover {
    background: #0056b3;
  }

  .order-table {
    width: 100%;
    border-collapse: separate;
    border-spacing: 0 0.5rem;
  }

  .place-order-div {
    display: flex;
    justify-content: space-between;
  }

  .order-table th {
    background: #f8f9fa;
    padding: 1rem;
    text-align: left;
    font-weight: 500;
    color: #666;
  }

  .order-table td {
    padding: 1rem;
    border-top: 1px solid #eee;
  }

  .price-summary {
    margin-top: 1.5rem;
    padding-top: 1.5rem;
    border-top: 1px solid #eee;
  }

  .price-row {
    display: flex;
    justify-content: space-between;
    margin-bottom: 0.75rem;
    color: #666;
  }

  .price-row.total {
    font-size: 1.25rem;
    font-weight: 600;
    color: #1a1a1a;
  }

  .coupon-section {
    background: #f8f9fa;
    padding: 0.5rem;
    border-radius: 8px;
    display: flex;
    align-items: center;
  }

  .coupon-section button {
    color: #28a745;
  }

  .coupon-card {
    border: 1px dashed #007bff;
    border-radius: 6px;
    padding: 1rem;
    margin-bottom: 0.75rem;
    background: white;
    cursor: pointer;
    transition: all 0.2s;
  }

  .coupon-card:hover {
    background: #f8f9ff;
  }

  .payment-option {
    margin: 1rem 0;
    padding: 1rem;
    border: 1px solid #eee;
    border-radius: 8px;
    cursor: pointer;
    transition: all 0.2s;
  }

  .payment-option:hover {
    border-color: #007bff;
    background: #f8f9ff;
  }

  .payment-option input[type="radio"] {
    margin-right: 1rem;
  }

  #place-order {
    padding: 0.6rem;
    padding-left: 1.3rem;
    padding-right: 1.3rem;
    background: #27da51;
    color: white;
    border: none;
    border-radius: 8px;
    font-size: 1rem;
    font-weight: bold;
    margin-top: 0.7rem;
    cursor: pointer;
    transition: all 0.2s;
  }

  #place-order:hover {
    background: #218838;
  }

  /* Modal Styles */
  .modal {
    display: none;
    position: fixed;
    z-index: 1050;
    /* Higher z-index to ensure it's on top */
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
  }

  .modal-dialog {
    max-width: 500px;
    max-height: 600px;
    margin: 7% auto;
  }

  .modal-content {
    background-color: #fefefe;
    margin: auto;
    padding: 20px;
    border: 1px solid #888;
    width: 100%;
    max-height: 580px;
    border-radius: 10px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  }

  .modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    border-bottom: 1px solid #ddd;
    padding-bottom: 10px;
  }

  .modal-body {
    max-height: 450px;
    overflow-y: scroll;
    /* Enables scrolling */
    scrollbar-width: none;
    /* Hides scrollbar in Firefox */
    -ms-overflow-style: none;
    /* Hides scrollbar in Internet Explorer and Edge */
  }

  /* Hides scrollbar in WebKit browsers (Chrome, Safari) */
  .modal-body::-webkit-scrollbar {
    display: none;
  }

  .modal-title {
    margin: 0;
    font-size: 1.25rem;
  }

  .close {
    background: none;
    border: none;
    font-size: 1.5rem;
    cursor: pointer;
    color: #999;
  }

  .close:hover {
    color: #333;
  }

  .form-group {
    margin-bottom: 1.5rem;
  }

  .form-group label {
    display: block;
    margin-bottom: 0.5rem;
    color: #666;
  }

  .form-group input {
    width: 100%;
    padding: 0.75rem;
    border: 1px solid #ddd;
    border-radius: 6px;
    font-size: 1rem;
  }

  .form-group input:focus {
    border-color: #007bff;
    outline: none;
  }

  .group-input {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 1rem;
  }

  .coupon-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 15px;
    border: 1px solid #ddd;
    margin-bottom: 10px;
    border-radius: 5px;
    transition: background-color 0.3s ease;
  }

  .coupon-item:hover {
    background-color: #f8f9fa;
  }

  .coupon-details {
    flex-grow: 1;
    margin-right: 15px;
  }

  .coupon-details h6 {
    margin-bottom: 5px;
    font-weight: bold;
  }

  .coupon-conditions {
    display: flex;
    justify-content: space-between;
    font-size: 0.8rem;
    color: #6c757d;
    margin-top: 10px;
  }
</style>

<div class="checkout-container">
  <h1 class="page-title">Checkout</h1>
  <div
    class="checkout-body"
    style="
      width: 100%;
      display: flex;
      flex-direction: row;
      gap: 6px;
    "
  >
    <div style="width: 100%;">
      <!-- Address Section -->
      <div class="section-card">
        <div class="section-header">
          <h2 class="section-title" style="margin-bottom: 35px;">
            Delivery Address
          </h2>
          <a href="/addAddress" class="btn btn-outline-info" style="border-radius: 5px;">New Address</a>
        </div>

        <div id="saved-addresses">
          <% address.forEach(address=> { %> <% address.address.forEach(addr=> {
          %>
          <div class="address-card">
            <input
              type="radio"
              name="deliveryAddress"
              value="<%= addr._id %>"
              id="address-<%= addr._id %>"
            />
            <strong> <%= addr.name %> </strong>
            <div class="address-details">
              <%= addr.landMark %>, <%= addr.city %>, <%= addr.state %>, <%=
              addr.pincode %>
            </div>
            <button type="button" class="btn btn-outline-primary" style="border-radius: 5px; padding-bottom: 2px; margin-top: 2px;" data-id="<%= addr._id %>">Edit</button>
          </div>
          <% }) %> <% }) %>
        </div>
      </div>
      <div class="section-card">
        <div class="section-header">
          <h2 class="section-title">
            Payment Options
          </h2>
        </div>

        <div class="payment_option">
          <label class="payment-option">
            <input type="radio" name="paymentMethod" value="COD" checked />
            Cash on Delivery
          </label>
          <label class="payment-option">
            <input type="radio" name="paymentMethod" value="Online" />
            Razor Pay
          </label>
          <label class="payment-option">
            <input type="radio" name="paymentMethod" value="wallet" />
            Wallet
          </label>
        </div>
      </div>
    </div>
    <div style="width: 100%;">
      <div class="section-card">
        <div class="section-header">
          <h2 class="section-title">
            Order Summary
          </h2>
        </div>

        <table class="order-table" data-cart-id="<%= cartId %>">
          <thead>
            <tr>
              <th>Item</th>
              <th>Quantity</th>
              <th>Price</th>
            </tr>
          </thead>
          <tbody>
            <% cart.forEach(item=> { %>
            <tr>
              <td><%= item.product.productName %></td>
              <td><%= item.quantity %></td>
              <td>₹<%= (item.price).toFixed(2) %></td>
            </tr>
            <% }) %>
          </tbody>
        </table>

        <div class="coupon-section">
        <button
          type="button"
          class="btn btn-light"
          data-toggle="modal"
          data-target="#couponModal"
        >
          See Coupons
        </button>
        <div id="applied-coupon-display" class="mt-2" style="margin-left: 30px;"></div>
      </div>

        <div class="price-summary">
          <div class="price-row">
            <span>Subtotal:</span>
            <span>₹<span id="subtotal"> <%= total.toFixed(2) %> </span></span>
          </div>
          <div class="price-row">
            <span>Discount:</span>
            <span>₹<span id="couponDiscount">0.00</span></span>
          </div>
          <div class="price-row total">
            <span>Total:</span>
            <input id="total" type="hidden" value="<%= total.toFixed(2) %>">
            <span id="final-total">₹<%= total.toFixed(2) %></span>
          </div>
        </div>
        <div class="place-order-div">
        <button id="place-order">Place Order</button>
      </div>
      </div>
      <div class="sidebar">
      <div
        class="modal fade"
        id="couponModal"
        role="dialog"
        aria-labelledby="couponModalLabel"
        aria-hidden="true"
      >
        <div class="modal-dialog" role="document">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title" id="couponModalLabel">
                Available Coupons
              </h5>
              <button
                type="button"
                class="close"
                data-dismiss="modal"
                aria-label="Close"
              >
                <span aria-hidden="true">&times;</span>
              </button>
            </div>
            <div class="modal-body">
              <% if (coupon && coupon.length> 0) { %>
              <div class="coupon-list">
                <% coupon.forEach(function(coupon) { %>
                <div
                  class="coupon-item"
                  data-coupon-code="<%= coupon.name %>"
                  data-discount="<%= coupon.offerPrice %>"
                >
                  <div class="coupon-details">
                    <h6><%= coupon.name %></h6>
                    <span class="badge badge-primary" style="color: #1a1a1a; padding-left: 0px;">
                    <%= coupon.offerPrice %> ₹OFF
                    </span>
                    <div class="coupon-conditions">
                      <small
                        >Min. Purchase: ₹<%= coupon.minimumPrice %>
                      </small>
                      <small
                        >Valid Until: <%= coupon.expireOn.toLocaleDateString()
                        %>
                      </small>
                    </div>
                  </div>
                  <button class="btn btn-outline-primary apply-coupon-btn">
                    Apply
                  </button>
                </div>
                <% }); %>
              </div>
              <% } else { %>
              <div class="alert alert-info text-center">
                No coupons available at the moment.
              </div>
              <% } %>
            </div>
          </div>
        </div>
      </div>
    </div>
    </div>
  </div>

</div>

<div id="addressModal" class="modal">
  <div class="modal-content">
    <span class="close">&times;</span>
    <h2>Add New Address</h2>
    <form id="addressForm">
      <div class="form-group">
        <label for="addressType">Address Type</label>
        <input type="text" id="addressType" name="addressType" required />
      </div>

      <div class="form-group">
        <label for="name">Full Name</label>
        <input type="text" id="name" name="name" required />
      </div>

      <div class="group-input">
        <div class="form-group">
          <label for="city">City</label>
          <input type="text" id="city" name="city" required />
        </div>

        <div class="form-group">
          <label for="landMark">Landmark</label>
          <input type="text" id="landMark" name="landMark" required />
        </div>
      </div>

      <div class="group-input">
        <div class="form-group">
          <label for="state">State</label>
          <input type="text" id="state" name="state" required />
        </div>

        <div class="form-group">
          <label for="pincode">Pincode</label>
          <input
            type="text"
            id="pincode"
            name="pincode"
            required
            pattern="[0-9]{6}"
          />
        </div>
      </div>

      <div class="form-group">
        <label for="phone">Phone Number</label>
        <input
          type="tel"
          id="phone"
          name="phone"
          required
          pattern="[0-9]{10}"
          placeholder="10-digit mobile number"
        />
      </div>

      <div class="form-group">
        <label for="altPhone">Alternative Phone Number (Optional)</label>
        <input
          type="tel"
          id="altPhone"
          name="altPhone"
          pattern="[0-9]{10}"
          placeholder="10-digit mobile number"
        />
      </div>

      <button type="submit" class="btn btn-primary">Save Address</button>
    </form>
  </div>
</div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>

  $(document).ready(function () {
  // =============== Coupon Management ===============
  let appliedCoupon = null;

  $(".apply-coupon-btn").on("click", function () {
    const couponItem = $(this).closest(".coupon-item");
    const couponCode = couponItem.data("coupon-code");
    const discountAmount = parseFloat(couponItem.data("discount"));
    
    // Get the current subtotal
    const subtotal = parseFloat($("#subtotal").text());
    
    // Get minimum purchase amount
    const minimumPurchaseText = couponItem.find(".coupon-conditions small").first().text();
    const minimumPurchaseAmount = parseFloat(minimumPurchaseText.split("₹")[1]);

    // Validate minimum purchase
    if (subtotal < minimumPurchaseAmount) {
      Swal.fire({
        icon: "warning",
        title: "Coupon Not Applicable",
        text: `This coupon requires a minimum purchase of ₹${minimumPurchaseAmount}`,
      });
      return;
    }

    // Calculate final total
    const finalTotal = subtotal - discountAmount;

    // Update UI
    $("#couponDiscount").text(discountAmount.toFixed(2));
    $("#final-total").text(`₹${finalTotal.toFixed(2)}`);
    $("#total").val(finalTotal.toFixed(2));

    // Store coupon details
    appliedCoupon = {
      code: couponCode,
      discountAmount: discountAmount
    };

    // Update applied coupon display with data attribute
    $("#applied-coupon-display").html(`
      <div class="alert alert-success" data-coupon-code="${couponCode}">
        ${couponCode} applied: ₹${discountAmount.toFixed(2)}
        <button class="btn btn-sm btn-link remove-coupon-btn">Remove</button>
      </div>
    `);

    $("#couponModal").modal("hide");

    // Send coupon application to server
    $.ajax({
      url: "/apply-coupon",
      method: "POST",
      data: {
        couponCode: couponCode,
        totalAmount: subtotal,
      },
      success: function (response) {
        if (!response.success) {
          removeCoupon();
          Swal.fire({
            icon: "error",
            title: "Coupon Application Failed",
            text: response.message,
          });
        }
      },
      error: function () {
        removeCoupon();
        Swal.fire({
          icon: "error",
          title: "Error",
          text: "Could not apply coupon. Please try again.",
        });
      },
    });
  });

  // Function to get current applied coupon code
  function getAppliedCouponCode() {
    const couponDisplay = $("#applied-coupon-display .alert-success");
    return couponDisplay.length > 0 ? couponDisplay.data("coupon-code") : "";
  }

  // Remove Coupon Function
  function removeCoupon() {
    const subtotal = parseFloat($("#subtotal").text());
    
    $("#couponDiscount").text("0.00");
    $("#final-total").text(`₹${subtotal.toFixed(2)}`);
    $("#total").val(subtotal.toFixed(2));
    $("#applied-coupon-display").empty();
    appliedCoupon = null;
  }

  // Remove Coupon Click Handler
  $(document).on("click", ".remove-coupon-btn", function () {
    removeCoupon();

    $.ajax({
      url: "/remove-coupon",
      method: "POST",
      success: function (response) {
        if (!response.success) {
          Swal.fire({
            icon: "error",
            title: "Error",
            text: "Could not remove coupon. Please try again.",
          });
        }
      },
    });
  });

  // =============== Address Management ===============
  // Edit address handler
  $(".edit-address").click(function () {
    const addressId = $(this).data("id");
    window.location.href = `/editAddress?id=${addressId}`;
  });

  // Add new address handler
  $(".add-new-address").click(function () {
    window.location.href = "/addAddress";
  });

  // =============== Order Placement ===============
  $("#place-order").click(function () {
    // Validate address selection
    const selectedAddress = document.querySelector('input[name="deliveryAddress"]:checked');
    if (!selectedAddress) {
      Swal.fire({
        title: "Error",
        text: "Please select a delivery address.",
        icon: "error",
        confirmButtonText: "OK",
      });
      return;
    }
    const addressId = selectedAddress.value;

    // Get cart ID
    const cartElement = document.querySelector("[data-cart-id]");
    const cartId = cartElement.getAttribute("data-cart-id");

    // Validate payment method
    const selectedPayment = document.querySelector('input[name="paymentMethod"]:checked');
    if (!selectedPayment) {
      Swal.fire({
        title: "Error",
        text: "Please select a payment method.",
        icon: "error",
        confirmButtonText: "OK",
      });
      return;
    }
    const paymentMethod = selectedPayment.value;

    const couponDiscount = parseFloat($("#couponDiscount").text()) || 0;
    const subtotal = parseFloat($("#subtotal").text());
    const finalTotal = parseFloat($("#total").val());
    const couponCode = getAppliedCouponCode();

    // Process based on payment method
    if (paymentMethod === "COD") {
      placeOrder(addressId, cartId, paymentMethod, couponCode, subtotal, couponDiscount, finalTotal);
    } else if (paymentMethod === "Online") {
      initiateRazorpayPayment(addressId, cartId, paymentMethod, couponCode, subtotal, couponDiscount, finalTotal);
    } else if (paymentMethod === "wallet") {
      processWalletPayment(addressId, cartId, paymentMethod, couponCode, subtotal, couponDiscount, finalTotal);
    }
  });

  // =============== Payment Processing Functions ===============
  function placeOrder(addressId, cartId, paymentMethod, couponCode, subtotal, couponDiscount, finalTotal) {
    Swal.fire({
      title: "Order Placed Successfully!",
      text: "Thank you for your order. You will be redirected shortly.",
      icon: "success",
      confirmButtonText: "OK",
      timer: 3000,
      timerProgressBar: true,
    }).then(() => {
      $.ajax({
        url: "/create-order",
        method: "POST",
        contentType: "application/json",
        data: JSON.stringify({
          addressId: addressId,
          cartId: cartId,
          paymentMethod: paymentMethod,
          couponCode: couponCode,
          subtotal: subtotal,
          couponDiscount: couponDiscount,
          finalAmount: finalTotal
        }),
        success: function (data) {
          window.location.href = `/order-confirmation?orderId=${data.orderId}`;
        },
        error: function (error) {
          Swal.fire({
            title: "Error",
            text: "An error occurred while placing your order.",
            icon: "error",
            confirmButtonText: "OK",
          });
        },
      });
    });
  }

  async function initiateRazorpayPayment(addressId, cartId, paymentMethod, couponCode, subtotal, couponDiscount, finalTotal) {
    try {
      const response = await fetch("/placeOrderRazorPay", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ 
          totalAmount: finalTotal,
          subtotal: subtotal,
          couponDiscount: couponDiscount,
          couponCode: couponCode
        }),
      });
      
      const data = await response.json();
      if (data.success) {
        const { orderId, amount, currency, key } = data;

        const options = {
          key,
          amount: amount,
          currency,
          name: "Time Edge",
          description: "Order Payment",
          order_id: orderId,
          handler: async function (response) {
            const paymentId = response.razorpay_payment_id;
            const razorpaySignature = response.razorpay_signature;
            const orderId = response.razorpay_order_id;

            const verifyResponse = await fetch("/verifyRazorPayOrder", {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify({
                addressId,
                paymentMethod,
                couponCode,
                orderId,
                paymentId,
                cartId,
                razorpaySignature,
                subtotal,
                couponDiscount,
                finalAmount: finalTotal
              }),
            });

            const verifyData = await verifyResponse.json();
            if (verifyData.success) {
              Swal.fire({
                title: "Payment Success",
                text: "Order Placed Successfully.",
                icon: "success",
                confirmButtonText: "OK",
              }).then(() => (window.location.href = "/order-confirmation"));
            } else {
              Swal.fire({
                icon: "error",
                title: "Payment Failed",
                text: "Payment verification failed. Please try again.",
                confirmButtonText: "OK",
              });
            }
          },
          modal: {
            ondismiss: async function () {
              try {
                const cancelResponse = await fetch("/verifyRazorPayOrder", {
                  method: "POST",
                  headers: {
                    "Content-Type": "application/json",
                  },
                  body: JSON.stringify({
                    addressId,
                    paymentMethod,
                    couponCode,
                    orderId: data.orderId,
                    paymentId: null,
                    cartId,
                    razorpaySignature: null,
                    paymentStatus: "Failed",
                    subtotal,
                    couponDiscount,
                    finalAmount: finalTotal
                  }),
                });

                const cancelData = await cancelResponse.json();
                Swal.fire({
                  icon: "error",
                  title: "Payment Failed",
                  text: "Your payment was unsuccessful. Order has been placed with status 'Payment Failed'.",
                  confirmButtonText: "OK",
                }).then(() => (window.location.href = "/cart"));
              } catch (error) {
                console.error("Error handling payment cancellation:", error);
                Swal.fire({
                  icon: "error",
                  title: "Error",
                  text: "An error occurred while handling payment cancellation.",
                  confirmButtonText: "OK",
                });
              }
            },
          },
          theme: { color: "#3399cc" },
        };

        const rzp = new Razorpay(options);
        rzp.open();
      } else {
        Swal.fire({
          icon: "error",
          title: "Error",
          text: data.message,
          confirmButtonText: "OK",
        });
      }
    } catch (error) {
      console.error("Error initiating Razorpay payment:", error);
      Swal.fire({
        title: "Error",
        text: "An error occurred while processing the payment.",
        icon: "error",
        confirmButtonText: "OK",
      });
    }
  }

  async function processWalletPayment(addressId, cartId, paymentMethod, couponCode, subtotal, couponDiscount, finalTotal) {
    try {
      const response = await fetch("/walletPayment", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          addressId,
          cartId,
          paymentMethod,
          couponCode,
          subtotal,
          couponDiscount,
          finalAmount: finalTotal
        }),
      });

      const data = await response.json();
      if (data.success) {
        Swal.fire({
          title: "Payment Success",
          text: "Order Placed Successfully.",
          icon: "success",
          confirmButtonText: "OK",
        }).then(() => (window.location.href = "/order-confirmation"));
      } else {
        Swal.fire({
          icon: "error",
          title: "Payment Failed",
          text: data.message || "Payment failed. Please try again.",
          confirmButtonText: "OK",
        });
      }
    } catch (error) {
      console.error("Error processing wallet payment:", error);
      Swal.fire({
        title: "Error",
        text: "An error occurred while processing the wallet payment.",
        icon: "error",
        confirmButtonText: "OK",
      });
    }
  }

  document.addEventListener("DOMContentLoaded", function () {
    const modal = document.getElementById("addressModal");
    const addAddressBtn = document.querySelector(".btn-primary");
    const closeBtn = document.querySelector(".close");
    const addressForm = document.getElementById("addressForm");
    const savedAddressesContainer = document.getElementById("saved-addresses");

    addAddressBtn.addEventListener("click", function (e) {
      e.preventDefault();
      modal.style.display = "block";
    });

    closeBtn.addEventListener("click", function () {
      modal.style.display = "none";
    });

    window.addEventListener("click", function (e) {
      if (e.target === modal) {
        modal.style.display = "none";
      }
    });

    function validatePhoneNumber(phone) {
      return /^[0-9]{10}$/.test(phone);
    }

    addressForm.addEventListener("submit", async function (e) {
      e.preventDefault();

      const phone = document.getElementById("phone").value;
      const altPhone = document.getElementById("altPhone").value;

      if (!validatePhoneNumber(phone)) {
        Swal.fire({
          icon: "error",
          title: "Invalid Phone Number",
          text: "Please enter a valid 10-digit phone number",
        });
        return;
      }

      if (altPhone && !validatePhoneNumber(altPhone)) {
        Swal.fire({
          icon: "error",
          title: "Invalid Alternative Phone Number",
          text: "Please enter a valid 10-digit phone number",
        });
        return;
      }

      const formData = {
        addressType: document.getElementById("addressType").value,

        name: document.getElementById("name").value,
        phone: phone,
        altPhone: altPhone || null,
        landMark: document.getElementById("landMark").value,
        city: document.getElementById("city").value,
        state: document.getElementById("state").value,
        pincode: document.getElementById("pincode").value,
      };

      try {
        const response = await fetch("/addAddressCheckout", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(formData),
        });

        if (response.ok) {
          const newAddress = await response.json();

          const addressDiv = document.createElement("div");
          addressDiv.className = "address";
          addressDiv.innerHTML = `
                    <input type="radio" name="deliveryAddress" value="${
                      newAddress._id
                    }" id="address-${newAddress._id}">
                    <p><strong>${newAddress.name}</strong></p>
                    <p>${newAddress.landMark}, ${newAddress.city}, ${
            newAddress.state
          }, ${newAddress.pincode}</p>
                    <p>Phone: ${newAddress.phone}</p>
                    ${
                      newAddress.altPhone
                        ? `<p>Alt Phone: ${newAddress.altPhone}</p>`
                        : ""
                    }
                    <button class="edit-address" data-id="${
                      newAddress._id
                    }">Edit</button>
                `;

          savedAddressesContainer.appendChild(addressDiv);

          addressForm.reset();
          modal.style.display = "none";

          Swal.fire({
            icon: "success",
            title: "Success!",
            text: "Address added successfully",
            timer: 2000,
            showConfirmButton: false,
          });
        } else {
          throw new Error("Failed to add address");
        }
      } catch (error) {
        console.error("Error:", error);
        Swal.fire({
          icon: "error",
          title: "Oops...",
          text: "Failed to add address. Please try again.",
        });
      }
    });
  }); });
</script>
<%-include("../../views/partials/user/footer") %>
