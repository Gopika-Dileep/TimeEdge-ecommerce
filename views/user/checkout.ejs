<%-include("../../views/partials/user/header") %>

<head>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">

     <style>
body {
    font-family: Arial, sans-serif;
    margin: 20px;
    line-height: 1.6;
}

h1, h2 {
    color: #333;
}

#address-section, #order-summary, #coupons-section, #payment-options {
    margin-bottom: 20px;
    padding: 20px;
    border: 1px solid #ccc;
    border-radius: 5px;
}

.address, .coupon {
    margin-bottom: 15px;
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 5px;
    background: #f9f9f9;
}

.address p, .coupon label {
    margin: 5px 0;
}

.btn {
    display: inline-block;
    margin-top: 10px;
    padding: 10px 15px;
    color: white;
    background: #007bff;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    text-align: center;
    text-decoration: none;
}

.btn:hover {
    background: #0056b3;
}

table {
    width: 100%;
    border-collapse: collapse;
    margin-top: 10px;
}

table th, table td {
    border: 1px solid #ddd;
    padding: 10px;
    text-align: left;
}

table th {
    background: #f4f4f4;
}

#place-order {
    width: 100%;
    padding: 15px;
    background: #28a745;
    color: white;
    font-size: 16px;
    font-weight: bold;
    border: none;
    border-radius: 5px;
    cursor: pointer;
}

#place-order:hover {
    background: #218838;
}
.modal {
  display: none;
  position: fixed;
  z-index: 1000;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0,0,0,0.5);
}

.modal-content {
  background-color: #fff;
  margin: 15% auto;
  padding: 20px;
  border-radius: 5px;
  width: 80%;
  max-width: 500px;
}

.close {
  float: right;
  font-size: 28px;
  font-weight: bold;
  cursor: pointer;
}

.form-group {
  margin-bottom: 15px;
}

.form-group label {
  display: block;
  margin-bottom: 5px;
}

.form-group input {
  width: 100%;
  padding: 8px;
  border: 1px solid #ddd;
  border-radius: 4px;
}

.form-group input:invalid {
  border-color: #ff6b6b;
}

.form-group input[type="tel"]::placeholder {
  color: #999;
  font-size: 0.9em;
}
</style>
</head>
<body>
    <h1>Checkout</h1>

    <section id="address-section">
        <h2>Delivery Address</h2>
        <div id="saved-addresses">
            <% address.forEach(address => { %>
                <% address.address.forEach(addr => { %>
                    <div class="address">
                        <input type="radio" name="deliveryAddress" value="<%= addr._id %>" id="address-<%= addr._id %>">
                        <p><strong><%= addr.name %></strong></p>
                        <p>
                            <%= addr.landMark %>, 
                            <%= addr.city %>, 
                            <%= addr.state %>, 
                            <%= addr.pincode %>
                        </p>
                        <button class="edit-address" data-id="<%= addr._id %>">Edit</button>
                    </div>
                <% }) %>
            <% }) %>
        </div>
        <a href="/addAddress" class="btn btn-primary">Add New Address</a>
    </section>

    <hr>

    <section id="order-summary">
        <h2>Order Summary</h2>
        <table data-cart-id="<%= cartId %>">
         <thead>
                <tr>
                    <th>Item</th>
                    <th>Quantity</th>
                    <th>Price</th>
                </tr>
            </thead>
            <tbody>
                <% cart.forEach(item => { %>
                    <tr>
                        <td><%= item.product.productName %></td>
                        <td><%= item.quantity %></td>
                        <td>₹<%= (item.price * item.quantity).toFixed(2) %></td>

                    </tr>
                <% }) %>
            </tbody>
        </table>
        <p id="subtotal">Subtotal: ₹<%= total.toFixed(2) %></p>
        <p>Discount: ₹<span id="couponDiscount">0.00</span></p>
    <p>Total: ₹<span id="final-total"><%= total.toFixed(2) %></span></p>
    </section>

    <hr>

    <section id="coupons-section">
        <h2>Available Coupons</h2>
        <div id="coupon-list">
            <% coupon.forEach(coupon => { %>
                <div class="coupon">
                    <input type="radio" name="coupon" value="<%= coupon._id %>" id="coupon-<%= coupon._id %>">
                    <label for="coupon-<%= coupon._id %>">
                        <strong><%= coupon.name %></strong> - Save ₹<%= coupon.offerPrice %> (Min Order: ₹<%= coupon.minimumPrice %>)
                        <br>Valid until: <%= coupon.expireOn.toISOString().split('T')[0] %>
                    </label>
                </div>
            <% }) %>
        </div>
        <button id="apply-coupon" class="btn">Apply Coupon</button>
        <button id="remove-coupon" class="btn">Remove Coupon</button>

    </section>

    <hr>

    <section id="payment-options">
        <h2>Payment Options</h2>
        <div class="payment_option">
            <div class="form-check">
                <input class="form-check-input" type="radio" name="paymentMethod" id="cod"
                    value="COD" checked>
                <label class="form-check-label" for="cod">Cash on Delivery</label>
            </div>
            <div class="form-check">
                <input class="form-check-input" type="radio" name="paymentMethod" id="razorPay"
                    value="Online">
                <label class="form-check-label" for="razorPay">Razor Pay</label>
            </div>
        </div>
    </section>

    <button class="place-order" id="place-order">Place Order</button>
    <div id="addressModal" class="modal">
        <div class="modal-content">
          <span class="close">&times;</span>
          <h2>Add New Address</h2>
          <form id="addressForm">
            <div class="form-group">
              <label for="name">Full Name</label>
              <input type="text" id="name" name="name" required>
            </div>
            <div class="form-group">
                <label for="city">City</label>
                <input type="text" id="city" name="city" required>
              </div>
           
            
            <div class="form-group">
              <label for="landMark">Landmark</label>
              <input type="text" id="landMark" name="landMark" required>
            </div>
            
          
            
            <div class="form-group">
              <label for="state">State</label>
              <input type="text" id="state" name="state" required>
            </div>
            
            <div class="form-group">
              <label for="pincode">Pincode</label>
              <input type="text" id="pincode" name="pincode" required pattern="[0-9]{6}">
            </div>
            
            <div class="form-group">
                <label for="phone">Phone Number</label>
                <input type="tel" id="phone" name="phone" required pattern="[0-9]{10}" placeholder="10-digit mobile number">
              </div>
              
              <div class="form-group">
                <label for="altPhone">Alternative Phone Number (Optional)</label>
                <input type="tel" id="altPhone" name="altPhone" pattern="[0-9]{10}" placeholder="10-digit mobile number">
              </div>

            <button type="submit" class="btn btn-primary">Save Address</button>
          </form>
        </div>
      </div>
</body>



    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>



    <script>
  $('.edit-address').click(function() {
    const addressId = $(this).data('id');
        window.location.href = `/editAddress?id=${addressId}`;
    
})

  $('.add-new-address').click(function() {
    window.location.href = '/addAddress'; 
});
$('.place-order').click(function() {
    const selectedAddress = document.querySelector('input[name="deliveryAddress"]:checked');
    if (!selectedAddress) {
        Swal.fire({
            title: 'Error',
            text: 'Please select a delivery address.',
            icon: 'error',
            confirmButtonText: 'OK'
        });
        return;
    }
    const addressId = selectedAddress.value;

    const cartElement = document.querySelector('[data-cart-id]');
    const cartId = cartElement.getAttribute('data-cart-id');

    const selectedPayment = document.querySelector('input[name="paymentMethod"]:checked');
    if (!selectedPayment) {
        Swal.fire({
            title: 'Error',
            text: 'Please select a payment method.',
            icon: 'error',
            confirmButtonText: 'OK'
        });
        return;
    }
    const paymentMethod = selectedPayment.value;
    

    const selectedCoupon = document.querySelector('input[name="coupon"]:checked');
    const couponId = selectedCoupon ? selectedCoupon.value : "";
    const subtotal = parseFloat(document.getElementById('subtotal').innerText.replace('Subtotal: ₹', '').trim());
    let discount = 0;
    if (paymentMethod === 'COD') {
        placeOrder(addressId, cartId, paymentMethod, couponId, subtotal, discount);
    } else if (paymentMethod === 'Online') {
        initiateRazorpayPayment(addressId, cartId, paymentMethod, couponId, subtotal, discount);
    }

    function placeOrder(addressId, cartId, paymentMethod, couponId, subtotal, discount) {
        
        Swal.fire({
        title: 'Order Placed Successfully!',
        text: 'Thank you for your order. You will be redirected shortly.',
        icon: 'success',
        confirmButtonText: 'OK',
        timer: 3000,
        timerProgressBar: true
    }).then(() => {
       
        $.ajax({
            url: '/create-order',
            method: 'POST',
            contentType: 'application/json',
            data: JSON.stringify({
                addressId: addressId,
                cartId: cartId,
                paymentMethod: paymentMethod,
                couponId: couponId,
            }),
            success: function (data) {
                console.log(data.orderId);
                window.location.href = `/order-confirmation?orderId=${data.orderId}`;
            },
            error: function (error) {
                Swal.fire({
                    title: 'Error',
                    text: 'An error occurred while placing your order.',
                    icon: 'error',
                    confirmButtonText: 'OK'
                });
            }
        });
    });
}

async function initiateRazorpayPayment(addressId, cartId, paymentMethod, couponId, subtotal, discount) {
    const currentTotal = subtotal - discount;

    try {
        const response = await fetch("/placeOrderRazorPay", {
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify({ totalAmount: currentTotal })
        });
        const data = await response.json();
        if (data.success) {
            const { orderId, amount, currency, key } = data;
            
            
            const options = {
                key,
                amount,
                currency,
                name: "Time Edge",
                description: "Order Payment",
                order_id: orderId,
                handler: async function(response) {
                    const paymentId = response.razorpay_payment_id;
                    const razorpaySignature = response.razorpay_signature;
                    const orderId = response.razorpay_order_id;

                    const verifyResponse = await fetch("/verifyRazorPayOrder", {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json"
                        },
                        body: JSON.stringify({
                            addressId,
                            paymentMethod,
                            couponId,
                            orderId,
                            paymentId,
                            cartId,
                            razorpaySignature
                        })
                    });
                  
                  const verifyData = await verifyResponse.json();
                    if (verifyData.success) {
                        alert(verifyData)
                        Swal.fire({
                            title: "Payment Success",
                            text: `Order Placed Successfully. Your OrderId is : ${verifyData.orderId}`,
                            icon: "success",
                            confirmButtonText: "OK"
                        }).then(() => window.location.href = "/cart");
                    } else {
                        Swal.fire({
                            icon: "error",
                            title: "Payment Failed",
                            text: "Payment verification failed. Please try again.",
                            confirmButtonText: "OK"
                        });
                    }
                },
                modal: {
                    ondismiss: async function () {
                        const cancelResponse = await fetch("/verifyRazorPayOrder", {
                            method: "POST",
                            headers: {
                                "Content-Type": "application/json"
                            },
                            body: JSON.stringify({
                                addressId,
                                paymentMethod,
                                couponId,
                                orderId,
                                paymentId: null,
                                razorpaySignature: null,
                                paymentStatus: "Failed"
                            })
                        });

                        const cancelData = await cancelResponse.json();
                        Swal.fire({
                            icon: "error",
                            title: "Payment Failed",
                            text: "Your payment was unsuccessful. Order has been placed with status 'Payment Failed'.",
                            confirmButtonText: "OK"
                        }).then(() => window.location.href = "/cart");
                    }
                },
                theme: { color: "#3399cc" },
            };

            const rzp = new Razorpay(options);
            rzp.open();
        } else {
            Swal.fire({
                icon: "error",
                title: "Error",
                text: data.message,
                confirmButtonText: "OK",
            });
        }
    } catch (error) {
        console.error(error);
        Swal.fire({
            title: "Error",
            text: "An error occurred while processing the payment.",
            icon: "error",
            confirmButtonText: "OK"
        });
    }
}
});

// let discount =0 ;
// const subtotalElement = document.getElementById('subtotal'); 
// const subtotal = parseFloat(subtotalElement.innerText.replace('Subtotal: ₹', '').trim());
// document.getElementById("apply-coupon").addEventListener("click",async (event)=>{
//     event.preventDefault()
//     const selectedCoupon = document.querySelector('input[name="coupon"]:checked');
//     if(!selectedCoupon){
//         Swal.fire({
//             title:"Error",
//             text:"Please select a coupon before applying.",
//             icon:"error"
//         })
//         return;
//     }
    
//     const couponCode = selectedCoupon.value;

//     try {
//         const response = await fetch("/verifyCoupon",{
//             method:"POST",
//             headers:{
//                 "Content-Type":"application/json"
//             },
//             body:JSON.stringify({couponCode,subtotal})
          

//         });
//         const data = await response.json();
//         if(data.success==true){
//             discount = data.discount;
//             document.getElementById("couponDiscount").textContent = `${discount.toFixed(2)}`;
            
//             currentTotal = subtotal - discount 
//             updateTotalDisplay(currentTotal,discount)
//             Swal.fire({
//                 title:"success",
//                 text:"Coupon added Successfully",
//                 icon:"Success"
//             });

//         }else{
//             Swal.fire({
//                 title: "Error",
//                 text: data.message || "Failed to apply the coupon.",
//                 icon: "error",
//             });
//         }
        

//     } catch (error) {
//         console.error(error)
//         Swal.fire({
//             title:"Error",
//             text:"An error occured while adding the coupon",
//             icon:"error"
//         })
//     }
// })

// function updateTotalDisplay(currentTotal,discount){
//     alert(currentTotal)
//     document.getElementById('final-total').textContent =`₹${currentTotal.toFixed(2)}`;
//     document.getElementById("couponDiscount").textContent =`₹${discount.toFixed(2)}`;
// }

let discount = 0;
let appliedCoupon = null; // Track the applied coupon

const subtotalElement = document.getElementById('subtotal');
let subtotal = parseFloat(subtotalElement.innerText.replace('Subtotal: ₹', '').trim());


document.getElementById("apply-coupon").addEventListener("click", async (event) => {
    event.preventDefault();
    const selectedCoupon = document.querySelector('input[name="coupon"]:checked');

    if (!selectedCoupon) {
        Swal.fire({
            title: "Error",
            text: "Please select a coupon before applying.",
            icon: "error"
        });
        return;
    }

    const couponCode = selectedCoupon.value;

    try {
        const response = await fetch("/verifyCoupon", {
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify({ couponCode, subtotal })
        });

        const data = await response.json();

        if (data.success === true) {
            discount = data.discount;
            appliedCoupon = couponCode; 
            document.getElementById("couponDiscount").textContent = `${discount.toFixed(2)}`;

            const currentTotal = subtotal - discount;
            updateTotalDisplay(currentTotal, discount);

            Swal.fire({
                title: "Success",
                text: "Coupon added successfully.",
                icon: "success"
            });
        } else {
            Swal.fire({
                title: "Error",
                text: data.message || "Failed to apply the coupon.",
                icon: "error",
            });
        }

    } catch (error) {
        console.error(error);
        Swal.fire({
            title: "Error",
            text: "An error occurred while adding the coupon",
            icon: "error"
        });
    }
});

document.getElementById("remove-coupon").addEventListener("click", async (event) => {
    if (!appliedCoupon) {
        Swal.fire({
            title: "Error",
            text: "No coupon applied.",
            icon: "error"
        });
        return;
    }

    appliedCoupon = null;
    discount = 0;

    const currentTotal = subtotal; 
    updateTotalDisplay(currentTotal, discount);

    Swal.fire({
        title: "Success",
        text: "Coupon removed successfully.",
        icon: "success"
    });
});

function updateTotalDisplay(currentTotal, discount) {
    document.getElementById('final-total').textContent = `₹${currentTotal.toFixed(2)}`;
    document.getElementById("couponDiscount").textContent = `₹${discount.toFixed(2)}`;
}
document.addEventListener('DOMContentLoaded', function() {
    const modal = document.getElementById('addressModal');
    const addAddressBtn = document.querySelector('.btn-primary');
    const closeBtn = document.querySelector('.close');
    const addressForm = document.getElementById('addressForm');
    const savedAddressesContainer = document.getElementById('saved-addresses');

    addAddressBtn.addEventListener('click', function(e) {
        e.preventDefault();
        modal.style.display = 'block';
    });

    closeBtn.addEventListener('click', function() {
        modal.style.display = 'none';
    });

    window.addEventListener('click', function(e) {
        if (e.target === modal) {
            modal.style.display = 'none';
        }
    });

    function validatePhoneNumber(phone) {
        return /^[0-9]{10}$/.test(phone);
    }

    addressForm.addEventListener('submit', async function(e) {
        e.preventDefault();
        
        const phone = document.getElementById('phone').value;
        const altPhone = document.getElementById('altPhone').value;

        if (!validatePhoneNumber(phone)) {
            Swal.fire({
                icon: 'error',
                title: 'Invalid Phone Number',
                text: 'Please enter a valid 10-digit phone number'
            });
            return;
        }

        if (altPhone && !validatePhoneNumber(altPhone)) {
            Swal.fire({
                icon: 'error',
                title: 'Invalid Alternative Phone Number',
                text: 'Please enter a valid 10-digit phone number'
            });
            return;
        }

        const formData = {
            name: document.getElementById('name').value,
            phone: phone,
            altPhone: altPhone || null,
            landMark: document.getElementById('landMark').value,
            city: document.getElementById('city').value,
            state: document.getElementById('state').value,
            pincode: document.getElementById('pincode').value
        };

        try {
            const response = await fetch('/addAddressCheckout', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(formData)
            });

            if (response.ok) {
                const newAddress = await response.json();
                
                const addressDiv = document.createElement('div');
                addressDiv.className = 'address';
                addressDiv.innerHTML = `
                    <input type="radio" name="deliveryAddress" value="${newAddress._id}" id="address-${newAddress._id}">
                    <p><strong>${newAddress.name}</strong></p>
                    <p>Phone: ${newAddress.phone}</p>
                    ${newAddress.altPhone ? `<p>Alt Phone: ${newAddress.altPhone}</p>` : ''}
                    <p>
                        ${newAddress.landMark},
                        ${newAddress.city},
                        ${newAddress.state},
                        ${newAddress.pincode}
                    </p>
                    <button class="edit-address" data-id="${newAddress._id}">Edit</button>
                `;
                
                savedAddressesContainer.appendChild(addressDiv);
                
                addressForm.reset();
                modal.style.display = 'none';
                
                Swal.fire({
                    icon: 'success',
                    title: 'Success!',
                    text: 'Address added successfully',
                    timer: 2000,
                    showConfirmButton: false
                });
            } else {
                throw new Error('Failed to add address');
            }
        } catch (error) {
            console.error('Error:', error);
            Swal.fire({
                icon: 'error',
                title: 'Oops...',
                text: 'Failed to add address. Please try again.',
            });
        }
    });
});

 </script>
</body>

</html>
<%-include("../../views/partials/user/footer") %>
