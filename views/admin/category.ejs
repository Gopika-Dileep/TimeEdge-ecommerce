<%- include("../../views/partials/admin/header") %>
<%- include("../../views/partials/admin/header") %>
<head>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@10/dist/sweetalert2.min.css"/>
  <link rel="stylesheet" href="/styles/category.css">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css">
</head>

<style>
  .content-main {
    position: absolute;
    top: 70px;
    left: 240px;
    width: calc(100% - 240px);
    padding: 2rem;
    background-color: #f8f9fa;
  }

  .card {
    border: none;
    box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
    border-radius: 0.5rem;
  }

  .card-header {
    background-color: transparent;
    border-bottom: 1px solid rgba(0, 0, 0, 0.125);
    padding: 1.5rem;
  }

  .search-container {
    max-width: 500px;
    margin: 0 auto;
  }

  .search-input {
    border-radius: 50rem;
    padding: 0.75rem 1.25rem;
    border: 1px solid #ced4da;
    transition: all 0.2s;
  }

  .search-input:focus {
    border-color: #80bdff;
    box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
  }

  .btn-primary {
    padding: 0.75rem 1.5rem;
    border-radius: 50rem;
    background-color: #0d6efd;
    border: none;
    transition: all 0.2s;
  }

  .btn-primary:hover {
    background-color: #0b5ed7;
    transform: translateY(-1px);
  }

  .table {
    margin-top: 1rem;
  }

  .table th {
    font-weight: 600;
    color: #495057;
    border-top: none;
  }

  .table td {
    vertical-align: middle;
  }

  .badge {
    padding: 0.5em 1em;
    font-weight: 500;
  }

  .btn-icon {
    padding: 0.375rem 0.75rem;
    border-radius: 0.25rem;
  }

  .modal-content {
    border-radius: 0.5rem;
    border: none;
  }

  .modal-header {
    border-bottom: 1px solid rgba(0, 0, 0, 0.1);
    padding: 1.5rem;
  }

  .modal-body {
    padding: 1.5rem;
  }

  .form-label {
    font-weight: 500;
    color: #495057;
  }

  .form-control {
    padding: 0.75rem 1rem;
    border-radius: 0.375rem;
    border: 1px solid #ced4da;
  }

  @media (max-width: 1000px) {
    .content-main {
      left: 20px;
      width: calc(100% - 30px);
    }
  }
</style>

<body>
  <section class="content-main">
    <div class="content-header d-flex justify-content-between align-items-center mb-4">
      <h2 class="content-title">Category Management</h2>
      <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addCategoryModal">
        <i class="bi bi-plus-lg me-2"></i>Add Category
      </button>
    </div>

    <div class="card">
      <div class="card-header">
        <form action="/admin/category" method="GET" class="search-container">
          <div class="input-group">
            <input type="text" class="form-control search-input" placeholder="Search categories" name="search" required />
            <button class="btn btn-primary" type="submit">Search</button>
          </div>
        </form>
      </div>

      <div class="card-body">
        <div class="table-responsive">
          <table class="table table-hover">
            <thead>
              <tr>
                <th class="text-center">#</th>
                <th class="text-center">Name</th>
                <th class="text-center">Description</th>
                <th class="text-center">Offer Percentage</th>
                <th class="text-center">Status</th>
                <th class="text-center">Offer</th>
                <th class="text-center">Actions</th>
              </tr>
            </thead>
            <tbody>
              <% if (category && category.length > 0) { %>
                <% category.forEach((category, index) => { %>
                  <tr>
                    <td class="text-center"><%= index + 1 %></td>
                    <td class="text-center"><%= category.name %></td>
                    <td class="text-center"><%= category.description %></td>
                    <td class="text-center" id="offer-<%= category._id %>"><%= category.categoryOffer %></td>
                    <td class="text-center">
                      <% if (category.isListed) { %>
                        <span class="badge bg-success">Listed</span>
                      <% } else { %>
                        <span class="badge bg-danger">Unlisted</span>
                      <% } %>
                    </td>
                    <td class="text-center" id="offer-btn-<%= category._id %>">
                      <% if (category.categoryOffer) { %>
                        <button onclick="removeOffer('<%= category._id %>')" class="btn btn-danger btn-icon">
                          <i class="bi bi-trash"></i>
                        </button>
                      <% } else { %>
                        <button onclick="addOffer('<%= category._id %>')" class="btn btn-success btn-icon">
                          <i class="bi bi-plus"></i>
                        </button>
                      <% } %>
                    </td>
                    <td class="text-center">
                      <div class="btn-group">
                        <% if (category.isListed) { %>
                          <button class="btn btn-danger btn-sm unlist-btn" data-id="<%= category._id %>">
                            <i class="bi bi-x-circle me-1"></i>Unlist
                          </button>
                        <% } else { %>
                          <button class="btn btn-success btn-sm list-btn" data-id="<%= category._id %>">
                            <i class="bi bi-check-circle me-1"></i>List
                          </button>
                        <% } %>
                        <a href="/admin/editCategory?id=<%= category._id %>" class="btn btn-info btn-sm ms-2">
                          <i class="bi bi-pencil me-1"></i>Edit
                        </a>
                      </div>
                    </td>
                  </tr>
                <% }); %>
              <% } else { %>
                <tr>
                  <td colspan="7" class="text-center">No categories found</td>
                </tr>
              <% } %>
            </tbody>
          </table>
        </div>
      </div>
    </div>

     <% if (searchQuery) { %>
    <% const searchParam = `&search=${searchQuery}`; %>
    <li class="page-item">
        <a class="page-link" href="?page=<%= currentpage - 1 %><%= searchParam %>">&laquo; Previous</a>
    </li>
    <% for (let i = 1; i <= totalpage; i++) { %>
        <li class="page-item <%= i === currentpage ? 'active' : '' %>">
            <a class="page-link" href="?page=<%= i %><%= searchParam %>"><%= i %></a>
        </li>
    <% } %>
    <% if (currentpage < totalpage) { %>
        <li class="page-item">
            <a class="page-link" href="?page=<%= currentpage + 1 %><%= searchParam %>">Next &raquo;</a>
        </li>
    <% } %>
<% } else { %>
<% } %>
    <div class="pagination-container mt-4">
      <ul class="pagination justify-content-center">
        <% if (currentpage > 1) { %>
          <li class="page-item">
            <a class="page-link" href="?page=<%= currentpage - 1 %>">&laquo; Previous</a>
          </li>
        <% } %>
        <% for (let i = 1; i <= totalpage; i++) { %>
          <li class="page-item <%= i === currentpage ? 'active' : '' %>">
            <a class="page-link" href="?page=<%= i %>"><%= i %></a>
          </li>
        <% } %>
        <% if (currentpage < totalpage) { %>
          <li class="page-item">
            <a class="page-link" href="?page=<%= currentpage + 1 %>">Next &raquo;</a>
          </li>
        <% } %>
      </ul>
    </div>

    <div class="modal fade" id="addCategoryModal" tabindex="-1" aria-labelledby="addCategoryModalLabel" aria-hidden="true">
      <div class="modal-dialog">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="addCategoryModalLabel">Add New Category</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <form id="categoryCreateForm" onsubmit="return handleFormSubmit(event)">
              <div class="mb-4">
                <label for="product_name" class="form-label">Name</label>
                <input type="text" name="name" placeholder="Enter category name" class="form-control" id="product_name" required />
                <div class="invalid-feedback" id="nameError"></div>
              </div>
              <div class="mb-4">
                <label class="form-label">Description</label>
                <textarea placeholder="Enter category description" name="description" class="form-control" id="descriptionId" required></textarea>
                <div class="invalid-feedback" id="descriptionError"></div>
              </div>
              <div class="text-end">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="submit" class="btn btn-primary ms-2">Create Category</button>
              </div>
            </form>
          </div>
        </div>
      </div>
    </div>
  </section>

  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@10/dist/sweetalert2.min.js"></script>

  <script>
    function handleFormSubmit(event) {
        event.preventDefault(); 
        if (!validateForm()) {
            return; 
        }
    
        const name = document.getElementsByName("name")[0].value.trim();
        const description = document.getElementById("descriptionId").value.trim();
    
        fetch("/admin/addCategory", {
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify({ name, description })
        })
        .then(response => {
            if (!response.ok) {
                throw new Error(`HTTP error! Status: ${response.status}`);
            }
            return response.json();
        })
        .then(data => {
            if (data) {
                $('#addCategoryModal').modal('hide');
                Swal.fire({
                    icon: "success",
                    title: "Category Added",
                    text: "The category has been added successfully!",
                    confirmButtonText: "OK"
                }).then(() => {
                    location.reload(); 
                });
            } else {
                throw new Error(data.error || "An error occurred while adding the category");
            }
        })
        .catch(error => {
            Swal.fire({
                icon: "error",
                title: "Oops!",
                text: 'Category already exists'
            });
        });
    }

    function handleFormSubmit(event) {
        event.preventDefault(); 
        if (!validateForm()) {
            return; 
        }
    
        const name = document.getElementsByName("name")[0].value.trim();
        const description = document.getElementById("descriptionId").value.trim();
    
        fetch("/admin/addCategory", {
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify({ name, description })
        })
        .then(response => {
        
          
            if (!response.ok) {
                throw new Error(HTTP `error! Status: ${response.status}`);
            }
            return response.json();
        })
        .then(data => {
          console.log(data)
            if (data) {
                Swal.fire({
                    icon: "success",
                    title: "Category Added",
                    text: "The category has been added successfully!",
                    confirmButtonText: "OK"
                }).then(() => {
                    location.reload(); 
                });
            } else {
                throw new Error(data.error || "An error occurred while adding the category");
            }
        })
        .catch(error => {
            Swal.fire({
                icon: "error",
                title: "Oops!",
               
                text:'Category already'
            });
        });
    }
    
    function validateForm() {
        clearErrorMessage(); 
        const name = document.getElementsByName("name")[0].value.trim();
        const description = document.getElementById("descriptionId").value.trim();
        let isValid = true;
    
    
        if (name === "") {
            displayErrorMessage("name-error", "Please enter a name");
            isValid = false;
        } else if (!/^[a-zA-Z0-9\s]+$/.test(name)) {
            displayErrorMessage("name-error", "Category name should contain only alphanumeric characters");
            isValid = false;
        }
    
   
        if (description === "") {
            displayErrorMessage("description-error", "Please enter a description");
            isValid = false;
        }
    
        return isValid;
    }
    
    function displayErrorMessage(elementId, message) {
        const errorElement = document.getElementById(elementId);
        if (errorElement) { 
            errorElement.innerHTML = message;
            errorElement.style.display = "block";
        }
    }
    async function addOffer(categoryId) {
    const { value: amount } = await Swal.fire({
        title: "Offer in percentage",
        input: "number",
        inputLabel: "Percentage",
        inputPlaceholder: '%',
    });

    if (amount !== null) { 
        $.ajax({
            url: "/admin/addCategoryOffer",
            method: "POST",
            data: {
                percentage: amount,
                categoryId: categoryId,
            },
            success: (response) => {
                if (response.status === true) {
                    Swal.fire('Offer added', 'The offer has been added successfully', 'success').then(() => {
                        $(`#offer-${categoryId}`).text(amount);
                        $(`#offer-btn-${categoryId}`).html('<button onclick="removeOffer(\'' + categoryId + '\')" class="btn btn-danger btn-icon"><i class="bi bi-trash"></i></button>');
                    });
                } else {
                    Swal.fire('Failed', 'Unable to add the offer', 'error');
                }
            },
            error: (err) => {
                console.error(err);
                Swal.fire('Error', 'An error occurred while adding the offer', 'error');
            },
        });
    }
}

function removeOffer(categoryId) {
    try {
        Swal.fire({
            title: "Remove offer",
            text: "Are you sure you want to remove this offer?",
            icon: "warning",
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, remove it!',
        }).then(async (result) => {
            if (result.isConfirmed) {
                $.ajax({
                    url: "/admin/removeCategoryOffer",
                    method: 'POST',
                    data: {
                      categoryId: categoryId
                    },
                    success: (response) => {
                        if (response.status === true) {
                            Swal.fire("Removed!", "The offer has been removed.", "success").then(() => {
                                $(`#offer-${categoryId}`).text('0');
                                $(`#offer-btn-${categoryId}`).html('<button onclick="addOffer(\'' + categoryId + '\')" class="btn btn-success btn-icon"><i class="bi bi-plus"></i></button>');
                            });
                        } else {
                            Swal.fire('Failed', 'Unable to remove the offer', 'error');
                        }
                    },
                    error: (err) => {
                        console.error(err);
                        Swal.fire('Error', 'An error occurred while removing the offer', 'error');
                    }
                });
            }
        });
    } catch (error) {
        console.error(error);
    }
}
    function clearErrorMessage() {

        const errorElements = document.getElementsByClassName("error-message");
        Array.from(errorElements).forEach(element => {
            element.innerText = "";
            element.style.display = "none";
        });
    }

    document.addEventListener("DOMContentLoaded",function(){
     const UnListBtn = document.querySelectorAll('.unlist-btn')
     UnListBtn.forEach(function (button){
       button.addEventListener('click',function(){
        const catId= button.getAttribute('data-id');
            $.ajax({
              url:`/admin/unlistCategory/${catId}`,
              method:'GET',
              success: function(response){
                location.reload()
              },
              error:function (xhr,status,error){
                console.error('error while unlisting user')
              }
            })
       })
     })



   const listbtn = document.querySelectorAll('.list-btn')
   listbtn.forEach(function (button){
    button.addEventListener('click',function(){
      const catId=button.getAttribute('data-id')
      $.ajax({
        url:`/admin/listCategory/${catId}`,
        method:"GET",
        success:function(response){
          location.reload()
        },
        error:function(xhr,status,error){
          console.error('error while listing user')
        }
      })
    })
   })
  })
  
  </script>

<%- include("../../views/partials/admin/footer") %>
 


