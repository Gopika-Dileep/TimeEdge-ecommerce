<%- include("../../views/partials/admin/header") %>
<head>
   <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.css">
  <style>
    
body {
    font-family: Arial, sans-serif;
    background-color: #f9f9f9;
    margin: 0;
    padding: 0;
}

.content-main {
    padding: 20px;
    max-width: 1200px;
    margin: 0 auto;
    background-color: #fff;
    border-radius: 8px;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
}

.content-header {
    margin-bottom: 20px;
}

h2.content-title {
    font-size: 24px;
    font-weight: bold;
    color: #333;
}


form {
    display: flex;
    flex-direction: column;
}

.form-label {
    font-weight: bold;
    margin-bottom: 8px;
    color: #555;
}

.form-control {
    width: 100%;
    padding: 10px;
    font-size: 14px;
    border: 1px solid #ccc;
    border-radius: 5px;
    transition: border-color 0.3s ease;
}

.form-control:focus {
    border-color: #007bff;
    outline: none;
}

.error-message {
    font-size: 12px;
    color: red;
    margin-top: 5px;
    display: none;
}


.form-select {
    padding: 10px;
    font-size: 14px;
    border: 1px solid #ccc;
    border-radius: 5px;
}


button {
    background-color: #007bff;
    color: #fff;
    padding: 10px 20px;
    border: none;
    border-radius: 5px;
    font-size: 14px;
    cursor: pointer;
    transition: background-color 0.3s ease;
}

button:hover {
    background-color: #0056b3;
}


.card {
    border: 1px solid #e3e3e3;
    border-radius: 8px;
    overflow: hidden;
    margin-bottom: 20px;
    background-color: #fff;
}

.card-header {
    background-color: #f5f5f5;
    padding: 10px 15px;
    border-bottom: 1px solid #e3e3e3;
    font-weight: bold;
    color: #333;
}

.card-body {
    padding: 15px;
}


.thumbnails-container {
    display: flex;
    flex-wrap: wrap;
    gap: 10px;
    margin-bottom: 15px;
}

img {
    max-width: 100%;
    border-radius: 5px;
}

.image-cropper {
    display: flex;
    justify-content: center;
    align-items: center;
    border: 1px dashed #007bff;
    border-radius: 5px;
    padding: 10px;
    margin-top: 10px;
    background-color: #f5f5f5;
}

.image-cropper img {
    max-width: 100%;
    max-height: 200px;
    margin-right: 10px;
}

.image-cropper button {
    margin-left: 10px;
}

.card-body.align-items-center img {
    display: block;
    margin: 0 auto 10px;
    max-width: 150px;
    border: 1px solid #ddd;
    padding: 5px;
    border-radius: 5px;
}

.card-body.align-items-center input[type="file"] {
    display: block;
    margin: 10px auto;
    max-width: 250px;
}


.row {
    display: flex;
    flex-wrap: wrap;
    margin-right: -15px;
    margin-left: -15px;
}

.col-lg-4, .col-sm-6, .col-lg-6 {
    padding-right: 15px;
    padding-left: 15px;
}

.col-lg-4 {
    flex: 0 0 33.333%;
    max-width: 33.333%;
}

.col-sm-6 {
    flex: 0 0 50%;
    max-width: 50%;
}

.col-lg-6 {
    flex: 0 0 50%;
    max-width: 50%;
}


@media (max-width: 768px) {
    .row {
        flex-direction: column;
    }

    .col-lg-6, .col-lg-4 {
        width: 100%;
        max-width: 100%;
    }

    .form-select, .form-control {
        width: 100%;
    }

    .card-body.align-items-center input[type="file"] {
        max-width: 100%;
    }

    .image-cropper {
        flex-direction: column;
        text-align: center;
    }

    .image-cropper button {
        margin: 10px 0 0;
    }
}

body {
    font-family: Arial, sans-serif;
    background-color: #f9f9f9;
    margin: 0;
    padding: 0;
}

.content-main {
    padding: 20px;
    max-width: 1200px;
    margin: 0 auto;
    background-color: #fff;
    border-radius: 8px;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
}

.content-header {
    margin-bottom: 20px;
}

h2.content-title {
    font-size: 24px;
    font-weight: bold;
    color: #333;
}


form {
    display: flex;
    flex-direction: column;
}

.form-label {
    font-weight: bold;
    margin-bottom: 8px;
    color: #555;
}

.form-control {
    width: 100%;
    padding: 10px;
    font-size: 14px;
    border: 1px solid #ccc;
    border-radius: 5px;
    transition: border-color 0.3s ease;
}

.form-control:focus {
    border-color: #007bff;
    outline: none;
}

.error-message {
    font-size: 12px;
    color: red;
    margin-top: 5px;
    display: none; 
}


.form-select {
    padding: 10px;
    font-size: 14px;
    border: 1px solid #ccc;
    border-radius: 5px;
}


button {
    background-color: #007bff;
    color: #fff;
    padding: 10px 20px;
    border: none;
    border-radius: 5px;
    font-size: 14px;
    cursor: pointer;
    transition: background-color 0.3s ease;
}

button:hover {
    background-color: #0056b3;
}


.card {
    border: 1px solid #e3e3e3;
    border-radius: 8px;
    overflow: hidden;
    margin-bottom: 20px;
    background-color: #fff;
}

.card-header {
    background-color: #f5f5f5;
    padding: 10px 15px;
    border-bottom: 1px solid #e3e3e3;
    font-weight: bold;
    color: #333;
}

.card-body {
    padding: 15px;
}

.thumbnails-container {
    display: flex;
    flex-wrap: wrap;
    gap: 10px;
    margin-bottom: 15px;
}

img {
    max-width: 100%;
    border-radius: 5px;
}

.image-cropper {
    border: 1px dashed #007bff;
    border-radius: 5px;
    justify-content: center;
    align-items: center;
    padding: 10px;
    background-color: #f5f5f5;
}


@media (max-width: 768px) {
    .row {
        flex-direction: column;
    }

    .col-lg-6, .col-lg-4 {
        width: 100%;
    }

    .form-select, .form-control {
        width: 100%;
    }
}






.error-message{
    color: red;
}


    .thumbnails-container {
        display: flex;
        overflow-x: auto;
    }


    .thumbnail {
        margin-right: 10px;


    }
    .content-main{
        position: absolute;
        top: 70px;
        left: 240px;
        width: calc(100% - 240px);
        padding: 2rem;
    }
    @media (max-width: 1000px) {
        .content-main {
        position: absolute;
        top: 50px;
        left: 20px;
        width: calc(100% - 30px);
        padding: 2rem;
    }
    }
  </style>
</head>

   <section class="content-main">
       <div class="row">
           <div class="col-9">
               <div class="content-header">
                   <h2 class="content-title">Add New Product</h2>
               </div>
           </div>
           <div class="col-lg-6">
               <div class="card mb-4">
                   <div class="card-body">
                       <form method="post" action="/admin/addProducts" enctype="multipart/form-data"
                           onsubmit="return validateForm()">
                           <div class="mb-4">
                               <label for="product_name" class="form-label">Product Name</label>
                               <input type="text" placeholder="Type here" name="productName"
                                   class="form-control border" id="product_name">
                               <div id="productName-error" class="error-message"></div>
                           </div>
                           <div class="col-lg-4 mb-4">
                               <label class="form-label">Brand</label>
                               <select class="form-select border" name="brand">
                                <% for(let i = 0; i < brand.length; i++) { %>
                                    <option value="<%= brand[i].name %>">
                                        <%= brand[i].name %>
                                    </option>
                                <% } %>
                                
                                     
                               </select>
                               <div id="brand-error" class="error-message"></div>
                           </div>
                           <div class="mb-4">
                               <label class="form-label">Full description</label>
                               <textarea placeholder="Type here" id="descriptionid" name="description" class="form-control border"
                                   rows="4"></textarea>
                               <div id="description-error" class="error-message"></div>
                           </div>
                           <div class="row">
                               <div class="col-lg-4">
                                   <div class="mb-4">
                                       <label class="form-label">Regular price</label>
                                       <input placeholder="$" name="regularPrice" type="text"
                                           class="form-control border">
                                           <div id="regularPrice-error" class="error-message"></div>
                                   </div>
                               </div>
                               <div class="col-lg-4">
                                   <div class="mb-4">
                                       <label class="form-label">Sale price</label>
                                       <input placeholder="$" name="salePrice" type="text" class="form-control border">
                                      
                                   </div>
                                   <div id="salePrice-error" class="error-message"></div>
                               </div>
                               <div class="col-lg-4">
                                   <div class="mb-4">
                                       <label class="form-label">Quantity</label>
                                       <input placeholder="" name="quantity" type="text" class="form-control border">
                                       <div id="quantity-error" class="error-message"></div>
                                   </div>
                               </div>
                           </div>
                           <div class="row">
                              
                               <!-- <div class="col-lg-4">
                                   <div class="mb-4">
                                       <label class="form-label">Color</label>
                                       <input  name="color" type="text" class="form-control border">
                                   </div>
                                   <div id="color-error" class="error-message"></div>
                               </div> -->
                            
                           </div>
                           <div class="card mb-4">
                               <div class="card-body">
                                   <div class="row gx-2">
                                       <div class="col-sm-6 mb-3">
                                           <label class="form-label">Category</label>
                                           <select class="form-select border" style="width: 150px;" name="category">
                                            <% for(let i = 0; i < cat.length; i++) { %>
                                                <option value="<%= cat[i].name %>">
                                                    <%= cat[i].name %>
                                                </option>
                                            <% } %>
                                            
                            
                                           </select>
                                           <div id="category-error" class="error-message"></div>
                                       </div>
                                   </div>
                               </div>
                           </div>
                           <div class="card mb-2">
                               <div class="card-header">
                                   <h4>Choose images</h4>
                               </div>
                               <div class="border row">
                                   <div id="addedImagesContainer" class="thumbnails-container"></div>
                               </div>
                               <div class="row">
                                   <div class="card-body align-items-center" style="margin-bottom: 20px;">
                                       <img src="" alt="" id="imgView1">
                                                                   <input class="form-control" type="file" name="images" id="input1"
                                                                       accept="image/png, image/jpeg, image/jpg"
                                                                       onchange="viewImage1(event), viewImage(event, 1)">
                                                                       <div id="images-error" class="error-message"></div>
                                                               </div>
                                                               <div class="image-cropper d-flex align-items-center"sx
                                                                   style="display:none; width: 300px; height: 200px; margin-bottom: 20px;">
                                                                   <img src="" id="croppedImg1" alt="">
                                                                   <button type="button" id="saveButton1" class="btn-sm btn-primary">Save</button>
                                                               </div>
                                                           </div>
                                                          
                                                           <div class="row">
                                                               <div class="card-body align-items-center" style="margin-bottom: 20px;">
                                                                   <img src="" alt="" id="imgView2">


                                                                   <input class="form-control" type="file" name="images" id="input2"
                                                                       accept="image/png, image/jpeg, image/jpg"
                                                                       onchange="viewImage2(event),viewImage(event, 2)">
                                                               </div>
                                                               <div class="image-cropper d-flex align-items-center"
                                                                   style="display:none; width: 300px; height: 200px; margin-bottom: 20px;">
                                                                   <img src="" id="croppedImg2" alt="">
                                                                   <button type="button" id="saveButton2" class="btn-sm btn-primary">Save</button>
                                                               </div>
                                                           </div>
                                                          
                                                           <div class="row">
                                                               <div class="card-body align-items-center" style="margin-bottom: 20px;">
                                                                   <img src="" alt="" id="imgView3">


                                                                   <input class="form-control" type="file" name="images" id="input3"
                                                                       accept="image/png, image/jpeg, image/jpg"
                                                                       onchange="viewImage3(event),viewImage(event, 3)">
                                                               </div>
                                                               <div class="image-cropper d-flex align-items-center"
                                                                   style="display:none; width: 300px; height: 200px; margin-bottom: 20px;">
                                                                   <img src="" id="croppedImg3" alt="">
                                                                   <button type="button" id="saveButton3" class="btn-sm btn-primary">Save</button>
                                                               </div>
                                                           </div>
                                                          
                                                           <div class="row">
                                                               <div class="card-body align-items-center" style="margin-bottom: 20px;">
                                                                   <img src="" alt="" id="imgView4">


                                                          
                                                                   <input class="form-control" type="file" name="images" id="input4"
                                                                       accept="image/png, image/jpeg, image/jpg"
                                                                       onchange="viewImage4(event),viewImage(event, 4)">
                                                               </div>
                                                               <div class="image-cropper d-flex align-items-center"
                                                                   style="display:none; width: 300px; height: 200px; margin-bottom: 20px;">
                                                                   <img src="" id="croppedImg4" alt="">
                                                                   <button type="button" id="saveButton4" class="btn-sm btn-primary">Save</button>
                                                               </div>
                                                           </div>
                          
                                                       </div>
                           </div>
                           <div>
                               <button class="btn btn-md rounded font-sm hover-up"  type="submit" onclick="validateForm()
">Publish</button>
                           </div>
                       </form>
                   </div>
               </div>
           </div>
       </div>
   </section>


   <script src="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.js"></script>
   <script>

// function validateAndSubmit() {
//     if (validateForm()) {
//         document.forms[0].submit();
//     }
// }

function viewImage1(event) {
        document.getElementById("imgView1").src = URL.createObjectURL(event.target.files[0])
    }
    function viewImage2(event) {

        document.getElementById("imgView2").src = URL.createObjectURL(event.target.files[0])
    }

    function viewImage3(event) {
        document.getElementById("imgView3").src = URL.createObjectURL(event.target.files[0])
    }

    function viewImage4(event) {
        document.getElementById("imgView4").src = URL.createObjectURL(event.target.files[0])
    }
    function viewImage(event, index) {
    const input = event.target;
    if (input.files && input.files[0]) {
        const reader = new FileReader();
        reader.onload = function () {
            const dataURL = reader.result;
            const image = document.getElementById("imgView" + index);
            image.src = dataURL;

            if (image.cropperInstance) {
                image.cropperInstance.destroy();
            }

            image.cropperInstance = new Cropper(image, {
                aspectRatio: NaN,
                viewMode: 1, 
                dragMode: 'move',
                guides: true,
                background: true, 
                autoCropArea: 0.8, 
                zoomable: true,
                scalable: true,
                movable: true,
                rotatable: true,
                minContainerWidth: 300, 
                minContainerHeight: 300,
            });

            const cropperContainer = document.querySelector("#croppedImg" + index).parentNode;
            cropperContainer.style.display = "block";

            const saveButton = document.querySelector("#saveButton" + index);
            saveButton.addEventListener(
                "click",
                function saveHandler() {
                    const croppedCanvas = image.cropperInstance.getCroppedCanvas();
                    if (!croppedCanvas) {
                        alert("Error: Could not crop the image. Try again.");
                        return;
                    }

                    const croppedImage = document.getElementById("croppedImg" + index);
                    croppedImage.src = croppedCanvas.toDataURL("image/jpeg", 1.0);

                    const timestamp = new Date().getTime();
                    const fileName = `cropped-img-${timestamp}-${index}.png`;

                    croppedCanvas.toBlob((blob) => {
                        if (!blob) {
                            alert("Error: Could not create image blob. Try again.");
                            return;
                        }

                        const fileInput = document.getElementById("input" + index);
                        const file = new File([blob], fileName, { type: "image/png" });

                        const dataTransfer = new DataTransfer();
                        dataTransfer.items.add(file);
                        fileInput.files = dataTransfer.files;

                        console.log(`Cropped image saved as: ${fileName}`);

                        cropperContainer.style.display = "none";
                        image.cropperInstance.destroy();
                        delete image.cropperInstance;
                    }, "image/png");
                },
                { once: true }
            );
        };
        reader.readAsDataURL(input.files[0]);
    }
}


function handleFileSelect(event) {
    const addedImagesContainer = document.getElementById("addedImagesContainer");
    addedImagesContainer.innerHTML = ""; 
    const files = event.target.files;

    for (let i = 0; i < files.length; i++) {
        const file = files[i];
        selectedImages.push(file);

        const thumbnail = document.createElement("div");
        thumbnail.classList.add("thumbnail");

        const img = document.createElement("img");
        img.src = URL.createObjectURL(file);
        img.alt = "thumbnail";
        img.style.width = "50px";
        img.style.height = "auto";

        const removeIcon = document.createElement("span");
        removeIcon.classList.add("remove-icon");
        removeIcon.innerHTML = "&times;";
        removeIcon.addEventListener("click", function () {
            const index = selectedImages.indexOf(file);
            if (index !== -1) {
                selectedImages.splice(index, 1);
            }
            thumbnail.remove();
        });

        thumbnail.appendChild(img);
        thumbnail.appendChild(removeIcon);
        addedImagesContainer.appendChild(thumbnail);
    }
}


   function validateForm() {
              clearErrorMessages();
              const name = document.getElementsByName('productName')[0].value;
              const description = document.getElementById('descriptionid').value;
              const brand = document.getElementsByName('brand')[0].value;
              const price = document.getElementsByName('regularPrice')[0].value;
              const saleprice = document.getElementsByName('salePrice')[0].value;
              const color = document.getElementsByName('color')[0].value;
              const category = document.getElementsByName('category')[0].value;
              const images = document.getElementById('input1')
              const quantity=document.getElementsByName('quantity')
              let isValid = true
              if (name.trim() === "") {
      displayErrorMessage('productName-error', 'Please enter a product name.');
      isValid = false;
    } else if (!/^[a-zA-Z\s;,.]+$/.test(name.trim())) {
    displayErrorMessage('productName-error', 'Product name can only contain letters, spaces, and the following characters: ; , .');
    isValid = false;
}

            
   if (description.trim() === "") {
      displayErrorMessage('description-error', 'Please enter a product description.');
      isValid = false;
    } else if (!/^[a-zA-Z0-9\s;:"._-]+$/.test(description.trim())) {
    displayErrorMessage('description-error', 'Product description can only contain letters, numbers, spaces, and the following characters: ; : " . _ -');
    isValid = false;
   }

  
              if ( parseInt(quantity) < 0) {
                  displayErrorMessage('quantity-error', 'Please enter a valid non-negative quantity.');
                  isValid = false;
              }
  
  
  
  
         
const sanitizedPrice = price.trim().replace(/,/g, '');

if (
    !/^\d{4,6}(\.\d{1,2})?$/.test(sanitizedPrice) || 
    parseFloat(sanitizedPrice) < 1000 ||             
    parseFloat(sanitizedPrice) > 100000              
) {
    displayErrorMessage(
        'regularPrice-error',
        'Please enter a valid price between 1000 and 100000. Example: 1500 or 1500.99'
    );
    isValid = false;
}

  
  
  
const sanitizedSalePrice = saleprice.trim().replace(/,/g, '');

if (
    !/^\d{4,6}(\.\d{1,2})?$/.test(sanitizedSalePrice) || 
    parseFloat(sanitizedSalePrice) < 1000 ||             
    parseFloat(sanitizedSalePrice) > 100000              
) {
    displayErrorMessage(
        'salePrice-error',
        `Please enter a valid sale price between 1,000 and 100,000. You entered: ${saleprice}`
    );
    isValid = false;
}


            if (parseFloat(price) <= parseFloat(saleprice)) {
                displayErrorMessage('regularPrice-error', `Regular price (${price}) must be greater than sale price (${saleprice}).`);
                isValid = false;
            }

  
              if (color.trim() === "") {
                  displayErrorMessage('color-error', 'Please enter a color.');
                  isValid = false;
              }
  
  
              if (images.files.length === 0) {
                  displayErrorMessage("images-error",'Please select an image.');
                  isValid = false;
              }
              return isValid;
          }


          function displayErrorMessage(elementId, message) {
              var errorElement = document.getElementById(elementId);
              errorElement.innerText = message;
              errorElement.style.display = "block";
          }
  
  
          function clearErrorMessages() {
              const errorElements = document.getElementsByClassName('error-message');
              Array.from(errorElements).forEach(element => {
                  element.innerText = '';
              });
              const errorMessage = document.getElementById('errorMessage');
  
  
          }

   </script>
   
     
<%- include("../../views/partials/admin/footer") %>